require 'rubygems'
require 'rake'
require 'rubocop/rake_task'

task default: :ios

# Run sh and ignore exception
# rubocop:disable Lint/HandleExceptions
def run_sh(cmd)
  sh cmd
rescue
end

# Run cmd. On failure run install and try again.
def bash(cmd)
  sh cmd do |successful, result|
    # exitstatus 7 means bundle install failed
    # exitstatus 1 means the test failed
    if !successful && result.exitstatus == 7
      Rake::Task['install'].execute
      run_sh cmd
    end
  end
end

# Run a single test with:
# rake ios['ios/element/generic']
#
# rake ios['driver']
#
# Run all tests with:
# rake ios
desc 'Run the iOS tests'
task :ios, :args, :test_file do |_args, test_file|
  # rake android['ok']
  # args = android
  # test_file = {:args=>"ok"}
  test_file         = test_file[:args]
  cmd = 'bundle exec ruby ./lib/run.rb ios'
  cmd += %( "#{test_file}") if test_file
  bash cmd
end

desc 'Run bundle install'
task :install do
  sh 'bundle install'
end

desc 'Execute RuboCop static code analysis'
RuboCop::RakeTask.new(:rubocop) do |t|
  t.patterns = %w(**/*.rb)
  t.options = %w(-D)
  t.fail_on_error = false
end

class Device
  def self.one
    {
      automationName: 'xcuitest',
      platformName: 'ios',
      platformVersion: '11.0',
      deviceName: 'iPhone 6',
      app: "#{Dir.pwd}/../test_apps/UICatalog.app",
      wdaLocalPort: 8100,
      isCommandsQueueEnabled: false
    }
  end

  def self.two
    {
      automationName: 'xcuitest',
      platformName: 'ios',
      platformVersion: '11.0',
      deviceName: 'iPhone 6s',
      app: "#{Dir.pwd}/../test_apps/UICatalog.app",
      wdaLocalPort: 8200,
      isCommandsQueueEnabled: false
    }
  end
end

desc 'Run tests with parallel thread'
task :run_parallel_t do
  require 'thread'
  require_relative 'parallel/test'

  threads = []
  [Device.one, Device.two].each do |capability|
    threads << Thread.new do
      TestParallelRunThread.new(capability).test_run
    end
  end

  threads.each(&:join)
end

desc 'Run tests with parallel processes'
task :run_parallel_p do
  require_relative 'parallel/test'

  [Device.one, Device.two].each do |capability|
    fork do
      TestParallelRunProcess.new(capability).test_run
    end
  end

  Process.waitall
end
